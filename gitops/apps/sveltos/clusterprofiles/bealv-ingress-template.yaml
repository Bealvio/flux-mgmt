apiVersion: v1
kind: ConfigMap
metadata:
  name: bealv-ingress-template
  namespace: projectsveltos
  annotations:
    projectsveltos.io/template: "true"
data:
  bealv-ingress.yaml: |
    {{ $cluster := .Cluster }}
    {{ $hostconfigmap := index (getResource "HostConfigMap").data "host" }}
    {{ $lbdata := getResource "LBDataConfigMap" }}
    {{ $serviceName := index $lbdata.data "originalservice" }}
    {{ $serviceNamespace := index $lbdata.data "namespace" }}
    {{ $clusterName := index $lbdata.data "clusterName" }}
    {{ $loadBalancerIP := index $lbdata.data "loadBalancerIP" }}
    {{ $port := index $lbdata.data "port" }}
    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: "{{ $serviceName }}{{ $clusterName }}"
      namespace: "{{ $serviceNamespace }}"
    spec:
      internalTrafficPolicy: Cluster
      ipFamilies:
      - IPv4
      ipFamilyPolicy: SingleStack
      ports:
      - port: {{ $port }}
        targetPort: {{ $port }}
        protocol: TCP
    ---
    addressType: IPv4
    apiVersion: discovery.k8s.io/v1
    kind: EndpointSlice
    metadata:
      labels:
        kubernetes.io/service-name: "{{ $serviceName }}{{ $clusterName }}"
      name: "{{ $serviceName }}{{ $clusterName }}"
      namespace: "{{ $serviceNamespace }}"
    endpoints:
    - addresses:
      - {{ $loadBalancerIP }}
      conditions:
        ready: true
    ports:
    - name: "port{{ $port }}"
      port: {{ $port }}
      protocol: TCP
    ---
    apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      annotations:
        cert-manager.io/cluster-issuer: bealvio
        external-dns.alpha.kubernetes.io/target: bealv.io
      name: "{{ $serviceName }}{{ $clusterName }}"
      namespace: "{{ $serviceNamespace }}"
    spec:
      ingressClassName: external
      rules:
      - host: {{ $hostconfigmap }}
        http:
          paths:
          - backend:
              service:
                name: "{{ $serviceName }}{{ $clusterName }}"
                port:
                  number: {{ $port }}
            path: /
            pathType: Prefix
      tls:
      - hosts:
        - "{{ (getResource "HostConfigMap").data.host }}"
        secretName: "{{ $serviceName }}{{ $clusterName }}tls"